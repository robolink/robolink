"""autogenerated by genpy from robolink/RobolinkControl.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class RobolinkControl(genpy.Message):
  _md5sum = "da80d113bacc5f7d3e3d17160c6b517a"
  _type = "robolink/RobolinkControl"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# This message will be used to control the Robolink via direct joint control, pose control, or twist control

# Control Mode Options
uint8 JOINT_VELOCITY =1
uint8 JOINT_ABSOLUTE_POSITION = 2
uint8 JOINT_RELATIVE_POSITION = 3
uint8 POSE_CONTROL = 4
uint8 TWIST_CONTROL = 5

Header header

uint8 control_mode

#Direct joint control
int32 joint_0_setpoint
int32 joint_1_setpoint
int32 joint_2_setpoint
int32 joint_3_setpoint
int32 joint_4_setpoint

#Pose Control
geometry_msgs/Pose pose

#Twist Control
geometry_msgs/Twist twist
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
"""
  # Pseudo-constants
  JOINT_VELOCITY = 1
  JOINT_ABSOLUTE_POSITION = 2
  JOINT_RELATIVE_POSITION = 3
  POSE_CONTROL = 4
  TWIST_CONTROL = 5

  __slots__ = ['header','control_mode','joint_0_setpoint','joint_1_setpoint','joint_2_setpoint','joint_3_setpoint','joint_4_setpoint','pose','twist']
  _slot_types = ['std_msgs/Header','uint8','int32','int32','int32','int32','int32','geometry_msgs/Pose','geometry_msgs/Twist']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,control_mode,joint_0_setpoint,joint_1_setpoint,joint_2_setpoint,joint_3_setpoint,joint_4_setpoint,pose,twist

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RobolinkControl, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.control_mode is None:
        self.control_mode = 0
      if self.joint_0_setpoint is None:
        self.joint_0_setpoint = 0
      if self.joint_1_setpoint is None:
        self.joint_1_setpoint = 0
      if self.joint_2_setpoint is None:
        self.joint_2_setpoint = 0
      if self.joint_3_setpoint is None:
        self.joint_3_setpoint = 0
      if self.joint_4_setpoint is None:
        self.joint_4_setpoint = 0
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.twist is None:
        self.twist = geometry_msgs.msg.Twist()
    else:
      self.header = std_msgs.msg.Header()
      self.control_mode = 0
      self.joint_0_setpoint = 0
      self.joint_1_setpoint = 0
      self.joint_2_setpoint = 0
      self.joint_3_setpoint = 0
      self.joint_4_setpoint = 0
      self.pose = geometry_msgs.msg.Pose()
      self.twist = geometry_msgs.msg.Twist()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_B5i13d.pack(_x.control_mode, _x.joint_0_setpoint, _x.joint_1_setpoint, _x.joint_2_setpoint, _x.joint_3_setpoint, _x.joint_4_setpoint, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.twist.linear.x, _x.twist.linear.y, _x.twist.linear.z, _x.twist.angular.x, _x.twist.angular.y, _x.twist.angular.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.twist is None:
        self.twist = geometry_msgs.msg.Twist()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 125
      (_x.control_mode, _x.joint_0_setpoint, _x.joint_1_setpoint, _x.joint_2_setpoint, _x.joint_3_setpoint, _x.joint_4_setpoint, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.twist.linear.x, _x.twist.linear.y, _x.twist.linear.z, _x.twist.angular.x, _x.twist.angular.y, _x.twist.angular.z,) = _struct_B5i13d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_B5i13d.pack(_x.control_mode, _x.joint_0_setpoint, _x.joint_1_setpoint, _x.joint_2_setpoint, _x.joint_3_setpoint, _x.joint_4_setpoint, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.twist.linear.x, _x.twist.linear.y, _x.twist.linear.z, _x.twist.angular.x, _x.twist.angular.y, _x.twist.angular.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.twist is None:
        self.twist = geometry_msgs.msg.Twist()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 125
      (_x.control_mode, _x.joint_0_setpoint, _x.joint_1_setpoint, _x.joint_2_setpoint, _x.joint_3_setpoint, _x.joint_4_setpoint, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.twist.linear.x, _x.twist.linear.y, _x.twist.linear.z, _x.twist.angular.x, _x.twist.angular.y, _x.twist.angular.z,) = _struct_B5i13d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_B5i13d = struct.Struct("<B5i13d")

#!/usr/bin/env python
import roslib; 
import ros
roslib.load_manifest('robolink')
import rospy

from EposManager.msg import EPOSControl
from EposManager.msg import GroupEPOSControl
from EposManager.msg import GroupMotorInfo
from sensor_msgs.msg import Joy
from robolink.msg import RobolinkInfo
from robolink.msg import RobolinkControl

import array
from array import array

from robolink.classes import robolinkJoint

robolinkControlPublisher = rospy.Publisher('Robolink_Control', RobolinkControl)
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
CALLBACKS
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

def joyCallback(Joy):
    
    jointVelocities = array('l', [0, 0, 0, 0, 0])
    
    if Joy.buttons[5] or Joy.buttons[4]:
        
        #There seems to be a bug in the joy_node that causes the trigger values to show up as zero when they haven't been pressed yet.
        #This causes a problem where joints would move without triggers being pressed.
        #We'll ignore them if they're zero since they should be 1 by default.
        if(Joy.axes[2] != 0 and Joy.axes[5] != 0):
            leftTrigger = 0.5*Joy.axes[2]
            rightTrigger = -0.5*Joy.axes[5]
            jointVelocities[0] = int((leftTrigger+rightTrigger)*robolinkJoint.maxAbsVelocity)
            #print jointVelocities[0]
        else:
            jointVelocities[0] = 0
            
        jointVelocities[1] = int(Joy.axes[1]*robolinkJoint.maxAbsVelocity)
        jointVelocities[2] = int(Joy.axes[0]*robolinkJoint.maxAbsVelocity)
        jointVelocities[3] = int(Joy.axes[4]*robolinkJoint.maxAbsVelocity)
        jointVelocities[4] = int(Joy.axes[3]*robolinkJoint.maxAbsVelocity)
        
    else:
        jointVelocities = [0, 0, 0, 0, 0]
    
    robolinkControlMsg = buildControlMsg(jointVelocities)
    robolinkControlPublisher.publish(robolinkControlMsg)
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
MISC METHODS
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
def buildControlMsg(jointVelocities):
    '''
    Takes in a RobolinkControl() message and an array of jointVelocities and builds a message
    '''
    robolinkControlMsg = RobolinkControl()
    
    #Build the header
    now = rospy.Time.now()
    robolinkControlMsg.header.frame_id = 'baseFrame'
    robolinkControlMsg.header.stamp = now
    
    #Set the control mode
    robolinkControlMsg.control_mode = robolinkControlMsg.JOINT_VELOCITY
    
    #Set the setpoints
    robolinkControlMsg.joint_0_setpoint = jointVelocities[0]
    robolinkControlMsg.joint_1_setpoint = jointVelocities[1]
    robolinkControlMsg.joint_2_setpoint = jointVelocities[2]
    robolinkControlMsg.joint_3_setpoint = jointVelocities[3]
    robolinkControlMsg.joint_4_setpoint = jointVelocities[4]
    
    print robolinkControlMsg
    return robolinkControlMsg
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
MAIN
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""    
# The main function
if __name__ == '__main__':
    
    #initialize()
    try:
        rospy.init_node('XboxControl')  
        rospy.Subscriber("joy", Joy, joyCallback)            
        print "Xbox Control: Use an Xbox controller to control the joints."
        print "Note: You must hold either LB or RB in order to move the joints.  Releasing these will cause all joints to stop."
        rospy.spin()
    except rospy.ROSInterruptException:
        pass
    
    finally:
        jointVelocities = [0, 0, 0, 0, 0]    
        robolinkControlMsg = buildControlMsg(jointVelocities)
        robolinkControlPublisher.publish(robolinkControlMsg)
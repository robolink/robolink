/* Auto-generated by genmsg_cpp for file /home/ttremblay/groovy_workspace/sandbox/robolink/msg/RobolinkInfo.msg */
#ifndef ROBOLINK_MESSAGE_ROBOLINKINFO_H
#define ROBOLINK_MESSAGE_ROBOLINKINFO_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/Pose.h"

namespace robolink
{
template <class ContainerAllocator>
struct RobolinkInfo_ {
  typedef RobolinkInfo_<ContainerAllocator> Type;

  RobolinkInfo_()
  : current_position()
  , joint_angles()
  , joint_velocities()
  , stamp()
  {
  }

  RobolinkInfo_(const ContainerAllocator& _alloc)
  : current_position(_alloc)
  , joint_angles(_alloc)
  , joint_velocities(_alloc)
  , stamp()
  {
  }

  typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _current_position_type;
   ::geometry_msgs::Pose_<ContainerAllocator>  current_position;

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _joint_angles_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  joint_angles;

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _joint_velocities_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  joint_velocities;

  typedef ros::Time _stamp_type;
  ros::Time stamp;


  typedef boost::shared_ptr< ::robolink::RobolinkInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robolink::RobolinkInfo_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct RobolinkInfo
typedef  ::robolink::RobolinkInfo_<std::allocator<void> > RobolinkInfo;

typedef boost::shared_ptr< ::robolink::RobolinkInfo> RobolinkInfoPtr;
typedef boost::shared_ptr< ::robolink::RobolinkInfo const> RobolinkInfoConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::robolink::RobolinkInfo_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::robolink::RobolinkInfo_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace robolink

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::robolink::RobolinkInfo_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::robolink::RobolinkInfo_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::robolink::RobolinkInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "03f18ab74164f6bff2ac6ce14e2d9583";
  }

  static const char* value(const  ::robolink::RobolinkInfo_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x03f18ab74164f6bfULL;
  static const uint64_t static_value2 = 0xf2ac6ce14e2d9583ULL;
};

template<class ContainerAllocator>
struct DataType< ::robolink::RobolinkInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robolink/RobolinkInfo";
  }

  static const char* value(const  ::robolink::RobolinkInfo_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::robolink::RobolinkInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# This message will be used monitor information specific to the robolink\n\
# joint_name is a string representing the name of the joint\n\
# joint_num is the number of the joint\n\
# joint_angle is the angle of the joint in degrees\n\
# joint_velocity is the velocity of the joint in degrees per second\n\
\n\
\n\
geometry_msgs/Pose current_position\n\
int32[] joint_angles\n\
int32[] joint_velocities\n\
time stamp\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::robolink::RobolinkInfo_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::robolink::RobolinkInfo_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.current_position);
    stream.next(m.joint_angles);
    stream.next(m.joint_velocities);
    stream.next(m.stamp);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RobolinkInfo_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robolink::RobolinkInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::robolink::RobolinkInfo_<ContainerAllocator> & v) 
  {
    s << indent << "current_position: ";
s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.current_position);
    s << indent << "joint_angles[]" << std::endl;
    for (size_t i = 0; i < v.joint_angles.size(); ++i)
    {
      s << indent << "  joint_angles[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.joint_angles[i]);
    }
    s << indent << "joint_velocities[]" << std::endl;
    for (size_t i = 0; i < v.joint_velocities.size(); ++i)
    {
      s << indent << "  joint_velocities[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.joint_velocities[i]);
    }
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ROBOLINK_MESSAGE_ROBOLINKINFO_H


/* Auto-generated by genmsg_cpp for file /home/ttremblay/groovy_workspace/sandbox/robolink/msg/GroupRobolinkJointInfo.msg */
#ifndef ROBOLINK_MESSAGE_GROUPROBOLINKJOINTINFO_H
#define ROBOLINK_MESSAGE_GROUPROBOLINKJOINTINFO_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "robolink/RobolinkJointInfo.h"

namespace robolink
{
template <class ContainerAllocator>
struct GroupRobolinkJointInfo_ {
  typedef GroupRobolinkJointInfo_<ContainerAllocator> Type;

  GroupRobolinkJointInfo_()
  : joint_group()
  {
  }

  GroupRobolinkJointInfo_(const ContainerAllocator& _alloc)
  : joint_group(_alloc)
  {
  }

  typedef std::vector< ::robolink::RobolinkJointInfo_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::robolink::RobolinkJointInfo_<ContainerAllocator> >::other >  _joint_group_type;
  std::vector< ::robolink::RobolinkJointInfo_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::robolink::RobolinkJointInfo_<ContainerAllocator> >::other >  joint_group;


  typedef boost::shared_ptr< ::robolink::GroupRobolinkJointInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robolink::GroupRobolinkJointInfo_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GroupRobolinkJointInfo
typedef  ::robolink::GroupRobolinkJointInfo_<std::allocator<void> > GroupRobolinkJointInfo;

typedef boost::shared_ptr< ::robolink::GroupRobolinkJointInfo> GroupRobolinkJointInfoPtr;
typedef boost::shared_ptr< ::robolink::GroupRobolinkJointInfo const> GroupRobolinkJointInfoConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::robolink::GroupRobolinkJointInfo_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::robolink::GroupRobolinkJointInfo_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace robolink

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::robolink::GroupRobolinkJointInfo_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::robolink::GroupRobolinkJointInfo_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::robolink::GroupRobolinkJointInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9cbf4c5d543ded683462872f185048a9";
  }

  static const char* value(const  ::robolink::GroupRobolinkJointInfo_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x9cbf4c5d543ded68ULL;
  static const uint64_t static_value2 = 0x3462872f185048a9ULL;
};

template<class ContainerAllocator>
struct DataType< ::robolink::GroupRobolinkJointInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robolink/GroupRobolinkJointInfo";
  }

  static const char* value(const  ::robolink::GroupRobolinkJointInfo_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::robolink::GroupRobolinkJointInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# This message will be used monitor information specific to all robolink joints\n\
\n\
RobolinkJointInfo[] joint_group\n\
\n\
================================================================================\n\
MSG: robolink/RobolinkJointInfo\n\
# This message will be used monitor information specific to robolink joints\n\
# joint_name is a string representing the name of the joint\n\
# joint_num is the number of the joint\n\
# joint_angle is the angle of the joint in degrees\n\
# joint_velocity is the velocity of the joint in degrees per second\n\
\n\
\n\
string joint_name\n\
uint16 joint_num\n\
int32 joint_angle\n\
int32 joint_velocity\n\
time stamp\n\
\n\
";
  }

  static const char* value(const  ::robolink::GroupRobolinkJointInfo_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::robolink::GroupRobolinkJointInfo_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.joint_group);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GroupRobolinkJointInfo_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robolink::GroupRobolinkJointInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::robolink::GroupRobolinkJointInfo_<ContainerAllocator> & v) 
  {
    s << indent << "joint_group[]" << std::endl;
    for (size_t i = 0; i < v.joint_group.size(); ++i)
    {
      s << indent << "  joint_group[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::robolink::RobolinkJointInfo_<ContainerAllocator> >::stream(s, indent + "    ", v.joint_group[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // ROBOLINK_MESSAGE_GROUPROBOLINKJOINTINFO_H


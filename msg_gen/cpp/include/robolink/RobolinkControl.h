/* Auto-generated by genmsg_cpp for file /home/ttremblay/groovy_workspace/sandbox/robolink/msg/RobolinkControl.msg */
#ifndef ROBOLINK_MESSAGE_ROBOLINKCONTROL_H
#define ROBOLINK_MESSAGE_ROBOLINKCONTROL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "geometry_msgs/Pose.h"
#include "geometry_msgs/Twist.h"

namespace robolink
{
template <class ContainerAllocator>
struct RobolinkControl_ {
  typedef RobolinkControl_<ContainerAllocator> Type;

  RobolinkControl_()
  : header()
  , control_mode(0)
  , joint_0_setpoint(0)
  , joint_1_setpoint(0)
  , joint_2_setpoint(0)
  , joint_3_setpoint(0)
  , joint_4_setpoint(0)
  , pose()
  , twist()
  {
  }

  RobolinkControl_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , control_mode(0)
  , joint_0_setpoint(0)
  , joint_1_setpoint(0)
  , joint_2_setpoint(0)
  , joint_3_setpoint(0)
  , joint_4_setpoint(0)
  , pose(_alloc)
  , twist(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef uint8_t _control_mode_type;
  uint8_t control_mode;

  typedef int32_t _joint_0_setpoint_type;
  int32_t joint_0_setpoint;

  typedef int32_t _joint_1_setpoint_type;
  int32_t joint_1_setpoint;

  typedef int32_t _joint_2_setpoint_type;
  int32_t joint_2_setpoint;

  typedef int32_t _joint_3_setpoint_type;
  int32_t joint_3_setpoint;

  typedef int32_t _joint_4_setpoint_type;
  int32_t joint_4_setpoint;

  typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
   ::geometry_msgs::Pose_<ContainerAllocator>  pose;

  typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _twist_type;
   ::geometry_msgs::Twist_<ContainerAllocator>  twist;

  enum { JOINT_VELOCITY = 1 };
  enum { JOINT_ABSOLUTE_POSITION = 2 };
  enum { JOINT_RELATIVE_POSITION = 3 };
  enum { POSE_CONTROL = 4 };
  enum { TWIST_CONTROL = 5 };

  typedef boost::shared_ptr< ::robolink::RobolinkControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robolink::RobolinkControl_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct RobolinkControl
typedef  ::robolink::RobolinkControl_<std::allocator<void> > RobolinkControl;

typedef boost::shared_ptr< ::robolink::RobolinkControl> RobolinkControlPtr;
typedef boost::shared_ptr< ::robolink::RobolinkControl const> RobolinkControlConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::robolink::RobolinkControl_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::robolink::RobolinkControl_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace robolink

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::robolink::RobolinkControl_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::robolink::RobolinkControl_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::robolink::RobolinkControl_<ContainerAllocator> > {
  static const char* value() 
  {
    return "da80d113bacc5f7d3e3d17160c6b517a";
  }

  static const char* value(const  ::robolink::RobolinkControl_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xda80d113bacc5f7dULL;
  static const uint64_t static_value2 = 0x3e3d17160c6b517aULL;
};

template<class ContainerAllocator>
struct DataType< ::robolink::RobolinkControl_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robolink/RobolinkControl";
  }

  static const char* value(const  ::robolink::RobolinkControl_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::robolink::RobolinkControl_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# This message will be used to control the Robolink via direct joint control, pose control, or twist control\n\
\n\
# Control Mode Options\n\
uint8 JOINT_VELOCITY =1\n\
uint8 JOINT_ABSOLUTE_POSITION = 2\n\
uint8 JOINT_RELATIVE_POSITION = 3\n\
uint8 POSE_CONTROL = 4\n\
uint8 TWIST_CONTROL = 5\n\
\n\
Header header\n\
\n\
uint8 control_mode\n\
\n\
#Direct joint control\n\
int32 joint_0_setpoint\n\
int32 joint_1_setpoint\n\
int32 joint_2_setpoint\n\
int32 joint_3_setpoint\n\
int32 joint_4_setpoint\n\
\n\
#Pose Control\n\
geometry_msgs/Pose pose\n\
\n\
#Twist Control\n\
geometry_msgs/Twist twist\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::robolink::RobolinkControl_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::robolink::RobolinkControl_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::robolink::RobolinkControl_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::robolink::RobolinkControl_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.control_mode);
    stream.next(m.joint_0_setpoint);
    stream.next(m.joint_1_setpoint);
    stream.next(m.joint_2_setpoint);
    stream.next(m.joint_3_setpoint);
    stream.next(m.joint_4_setpoint);
    stream.next(m.pose);
    stream.next(m.twist);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RobolinkControl_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robolink::RobolinkControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::robolink::RobolinkControl_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "control_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.control_mode);
    s << indent << "joint_0_setpoint: ";
    Printer<int32_t>::stream(s, indent + "  ", v.joint_0_setpoint);
    s << indent << "joint_1_setpoint: ";
    Printer<int32_t>::stream(s, indent + "  ", v.joint_1_setpoint);
    s << indent << "joint_2_setpoint: ";
    Printer<int32_t>::stream(s, indent + "  ", v.joint_2_setpoint);
    s << indent << "joint_3_setpoint: ";
    Printer<int32_t>::stream(s, indent + "  ", v.joint_3_setpoint);
    s << indent << "joint_4_setpoint: ";
    Printer<int32_t>::stream(s, indent + "  ", v.joint_4_setpoint);
    s << indent << "pose: ";
s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "twist: ";
s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.twist);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ROBOLINK_MESSAGE_ROBOLINKCONTROL_H

